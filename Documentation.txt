Технологічний Стек:

ASP.NET Core
EF Core
SignalR
SQL Server як база даних

Архітектура:

За основу взята 3-х рівнева архітектура з чітким розділенням на слої
Data Access Layer для взяємодії з базою даних
Business Logic Layer для обробки бізнес-логіки у сервісах
Presentation Layer що містить в собі контролери та SignalR хаби для взаємодії з клієнтом

У цьому проекті доступні такі можливості:

CRUD операції для управління чатами.
Операції для відправки повідомлень у чат за умови попереднього підключення.
Пошук існуючих чатів (всіх можливих та за Id).
Видалення чатів за умови статусу власника (id власника вписувати вручну)

Запуск:

Запустіть додаток за допомогою наприклад, Visual Studio, як це робив я, або скористайтеся командою dotnet run в терміналі у директорії проекту.

Після запуску додатку відкрийте веб-браузер і перейдіть за посиланням: https://localhost:(порт)/swagger.

Використання Swagger UI:

Виберіть метод API, який ви хочете протестувати.
Натисніть кнопку "Try it out".
Введіть необхідні параметри запиту.
Натисніть "Execute", щоб відправити запит до API.
Перегляньте відповідь API та статус-код в Swagger UI.
Параметри запиту:

Для методів, які потребують введення, таких як створення нового чату або відправка повідомлення, Swagger UI надає форму для введення параметрів (наприклад, userId, chatId, content повідомлення).

Тестування API:

Swagger UI дозволяє тестувати API безпосередньо з веб-інтерфейсу:

Також я створив два прості тести поза Swagger UI, хоча вони не несуть значної користі через можливість проводити тестування безпосередньо в інтерфейсі, вони відповідають вимогам технічного завдання і потребують проведення.